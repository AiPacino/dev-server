<?php
/**
 * Created by PhpStorm.
 * @author: <jinliangping@huishoubao.com.cn>
 * Date: 2018/1/22 0022-上午 10:09
 * @copyright (c) 2017, Huishoubao
 */

class data_count_control extends control
{

    public $max_cache_ids = 'max:cache:ids';

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $this->order_service = $this->load->service('order2/order');
        $this->appid_db = $this->load->table('channel/channel_appid');
        $this->spu_db = $this->load->table('goods/goods_spu');
        $this->count_condition_db = $this->load->service('statistics/count_condition');
        $this->debug_service = $this->load->service('debug/debug');
        $this->order_db = $this->load->table('order2/order2');
        $this->member_db = $this->load->table('member2/member');
        $this->delivery_db = $this->load->table('order2/order2_delivery');
        $this->count_total_db = $this->load->service('statistics/count_total');
        $this->count_channel_db = $this->load->service('statistics/count_channel');
        $this->follow_db = $this->load->table('order2/order2_follow');

    }


    /**
     * 初始化order_count表数据
     */
    public function init_count_condition($where = []){

        //获取新增订单数据
        $additional['size'] = 'all';
        $additional['goods_info'] = true;
        $additional['address_info'] = true;
        $order_list = $this->order_service->get_order_list($where, $additional);

        $data_list = [];
        //组装订单相关条件
        foreach ($order_list as $k => $item){
            $data = [];
            $data['id'] = $item['order_id'];
            $data['order_id'] = $item['order_id'];

            $channel_id = $this->appid_db->where(['id' => $item['appid']])->getField('channel_id', true);
            $data['channel_id'] = $channel_id[0];

            $data['appid'] = $item['appid'];
            $data['chengse'] = $item['chengse'];

            $data['cat_id'] = $item['goods_info']['category_id'];
            $data['user_id'] = $item['user_id'];
            $data['zm_score'] = $item['credit'];
            $data['age'] = get_age_by_cert_no($item['cert_no']);
            $data['brand_id'] = $item['goods_info']['brand_id'];

            $machine_id = $this->spu_db->where(['id' => $item['goods_info']['spu_id']])->getField('machine_id', true);
            $data['machine_id'] = $machine_id[0];
            $data['create_time'] = $item['create_time'];
            $data['province_id'] = $item['address_info']['province_id'];
            $data['city_id'] = $item['address_info']['city_id'];
            $data['country_id'] = $item['address_info']['country_id'];
            $data_list[] = $data;
        }
        //批量插入订单条件
        $result = $this->count_condition_db->addAll($data_list);
        if($result === false){
            zuji\debug\Debug::error(\zuji\debug\Location::L_DataCount, '初始化统计条件数据失败', [
                'error' => $this->count_condition_db->getError(),
                'data' => $data_list
            ]);
        }

        return $result;
    }


    /**
     * 初始化订单统计数据
     */
    public function init_count_total_data(){

        //下单量
        $field = "FROM_UNIXTIME(create_time,'%Y-%m-%d') days,count(order_id) orders";
        $order_searchs = $this->order_db->field($field)->group('days')->select();

        //成交量
        $sql = "SELECT SUM(amount) as amounts, COUNT(t1.order_id) as orders, FROM_UNIXTIME(t2.create_time,'%Y-%m-%d') as days FROM `zuji_order2_follow` t1 INNER JOIN zuji_order2 t2 ON t1.order_id=t2.order_id WHERE new_status in (22,7) GROUP BY days";
        $payment_searchs = $this->follow_db->query($sql);

        //退款量
        $sql = "SELECT SUM(amount) as amounts, COUNT(t1.order_id) as orders, FROM_UNIXTIME(t2.create_time,'%Y-%m-%d') as days FROM `zuji_order2_follow` t1 INNER JOIN zuji_order2 t2 ON t1.order_id=t2.order_id WHERE new_status in (10,23) GROUP BY days";
        $refund_searchs = $this->follow_db->query($sql);

        //租机发货量
        $sql ="SELECT count(DISTINCT t1.order_id) orders, FROM_UNIXTIME(t1.create_time,'%Y-%m-%d') as days FROM `zuji_order2_follow` t1 INNER JOIN zuji_order2_delivery t2 ON t1.order_id=t2.order_id WHERE new_status=11 and business_key=".\zuji\Business::BUSINESS_ZUJI." GROUP BY days";
        $delevery_searchs = $this->follow_db->query($sql);

        //检测量
        $evaluation_searchs = $this->follow_db->where(['new_status' => ['IN', [16,17]]])->field($field)->group('days')->select();

        //回寄量
        $sql ="SELECT count(DISTINCT t1.order_id) orders, FROM_UNIXTIME(t1.create_time,'%Y-%m-%d') as days FROM `zuji_order2_follow` t1 INNER JOIN zuji_order2_delivery t2 ON t1.order_id=t2.order_id WHERE new_status=11 and business_key=".\zuji\Business::BUSINESS_HUIJI." GROUP BY days";
        $huiji_searchs = $this->follow_db->query($sql);

        //换货量
        $sql ="SELECT count(DISTINCT t1.order_id) orders, FROM_UNIXTIME(t1.create_time,'%Y-%m-%d') as days FROM `zuji_order2_follow` t1 INNER JOIN zuji_order2_delivery t2 ON t1.order_id=t2.order_id WHERE new_status=11 and business_key=".\zuji\Business::BUSINESS_HUANHUO." GROUP BY days";
        $huanhuo_searchs = $this->follow_db->query($sql);

        $order_days = array_column($order_searchs, 'days');

        $crrent_date = date('Y-m-d');
        $days = $this->diffBetweenTwoDays($order_days[0], $crrent_date);
        $data_list = [];

        for ($i = 0; $i <= $days; $i++) {
            $data = [];
            $today = date('Y-m-d',strtotime("{$order_days[0]} +{$i} day"));
            $data['id'] = $i+1;
            $data['dateline'] = $today;
            $data['order_num'] = $this->getNumByDate($order_searchs, $today, 'orders');
            $data['complete_order_num'] = $this->getNumByDate($payment_searchs, $today, 'orders');
            $data['refund_num'] = $this->getNumByDate($refund_searchs, $today, 'orders');
            $data['delivery_num'] = $this->getNumByDate($delevery_searchs, $today, 'orders');
            $data['evaluation_num'] = $this->getNumByDate($evaluation_searchs, $today, 'orders');
            $data['huanhuo_num'] = $this->getNumByDate($huanhuo_searchs, $today, 'orders');
            $data['huiji_num'] = $this->getNumByDate($huiji_searchs, $today, 'orders');
            $data['pay_amount'] = $this->getNumByDate($payment_searchs, $today, 'amounts');
            $data['refund_amount'] = $this->getNumByDate($refund_searchs, $today, 'amounts');
            $data_list[] = $data;

        }

        $result = $this->count_total_db->addAll($data_list);
        if($result === false){
            zuji\debug\Debug::error(\zuji\debug\Location::L_DataCount, '初始化每日统计数据失败', [
                'error' => $this->count_total_db->getError(),
                'data' => $data_list
            ]);
        }

        $max_order_id = $this->order_db->max('order_id');
        $this->redis = \zuji\cache\Redis::getInstans();
        $max_id_list = $this->redis->get($this->max_cache_ids);
        if($max_id_list){
            $max_id_list = json_decode($max_id_list, true);
        }
        $max_id_list['order_id'] = $max_order_id;

        $this->redis->set($this->max_cache_ids, json_encode($max_id_list));
    }

    /**
     * 初始化渠道统计数据
     */
    public function init_count_channel_data(){
        $redis = \zuji\cache\Redis::getInstans();
        $appid_list = $this->order_db->where(['appid'=>['GT', 0]])->group('appid')->getField('appid', true);

        foreach ($appid_list as $appid){
            $where = ['appid' => $appid];
            //下单量
            $field = "FROM_UNIXTIME(create_time,'%Y-%m-%d') days,count(order_id) orders";
            $order_searchs = $this->order_db->where($where)->field($field)->group('days')->select();

            //成交量
            $sql = "SELECT SUM(amount) as amount, COUNT(t1.order_id) as orders, FROM_UNIXTIME(t2.create_time,'%Y-%m-%d') as days FROM `zuji_order2_follow` t1 INNER JOIN zuji_order2 t2 ON t1.order_id=t2.order_id WHERE new_status in (22,7) and t2.appid=".$appid." GROUP BY days";
            $payment_searchs = $this->follow_db->query($sql);

            $order_days = array_column($order_searchs, 'days');

            $crrent_date = date('Y-m-d');
            $days = $this->diffBetweenTwoDays($order_days[0], $crrent_date);
            $data_list = [];
            //会员计数器
            for ($i=0; $i <= $days; $i++) {
                $data = [];
                $today = date('Y-m-d',strtotime("{$order_days[0]} +{$i} day"));
                $data['appid'] = $appid;
                $data['dateline'] = $today;
                $data['order_num'] = $this->getNumByDate($order_searchs, $today, 'orders');
                $data['complete_order_num'] = $this->getNumByDate($payment_searchs, $today, 'orders');
                $data['all_amount'] = $this->getNumByDate($payment_searchs, $today, 'amount');
                $data['service_expire_num'] = 0;
                $date = date('Ymd', strtotime($today));
                $key = 'store:'.$appid.':'.$date;
                $pv = $redis->get($key);
                $data['pv'] = $pv;
                $data_list[] = $data;
            }

            $result = $this->count_channel_db->addAll($data_list);
            if($result === false){
                zuji\debug\Debug::error(\zuji\debug\Location::L_DataCount, '初始化每日渠道统计数据失败', [
                    'error' => $this->count_channel_db->getError(),
                    'data' => $data_list
                ]);
            }

        }
    }

    /**
     * 初始化机型
     */
    public function init_count_channel_machine_data(){
        $order2_follow_table = $this->follow_db->getTableName();

        $goods_machine_model = $this->load->table('goods/goods_machine_model');
        $goods_machine_table = $goods_machine_model->getTableName();

        $order_list = $this->count_condition_db->alias('t1')
            ->field('t1.channel_id,t1.machine_id,FROM_UNIXTIME(t1.create_time,\'%Y-%m-%d\') days, t2.name, count(*) as order_num')
            ->join($goods_machine_table.' as t2 ON t1.machine_id=t2.id')
            ->group('t1.channel_id, t1.machine_id, days')
            ->select();

        $w = [
            'new_status' => ['IN', [7, 22]]
        ];
        $complete_order_list = $this->count_condition_db->alias('t1')
            ->field('t1.channel_id,t1.machine_id,FROM_UNIXTIME(t2.create_time,\'%Y-%m-%d\') days, count(*) as complete_order_num')
            ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
            ->where($w)
            ->group('t1.channel_id, t1.machine_id, days')
            ->select();

        $count_channel_machine_model = $this->load->service('statistics/count_channel_machine');
        foreach ($order_list as $item){
            $data = [
                'dateline' => $item['days'],
                'channel_id' => $item['channel_id'],
                'machine_id' => $item['machine_id'],
                'machine_name' => $item['name'],
                'order_num' => $item['order_num'],
                'complete_order_num' => 0
            ];

            foreach ($complete_order_list as $value){
                if($value['days'] == $item['days'] && $value['channel_id'] == $item['channel_id'] && $value['machine_id'] == $item['machine_id']){
                    $data['complete_order_num'] = $value['complete_order_num'];
                }
            }

            $where = ['dateline' => $item['days'], 'channel_id' => $item['channel_id'], 'machine_id' => $item['machine_id']];
            $info = $count_channel_machine_model->where($where)->find();
            if($info){
                $data['id'] = $info['id'];
            }

            $count_channel_machine_model->update($data);
        }

        echo '数据初始化完成';die();
    }

    /**
     * 初始化会员统计
     */
    public function init_count_member_data(){
        $count_member = $this->load->service('statistics/count_member');
        /*$table_name = $count_member->trueTableName;
        $sql = "TRUNCATE TABLE {$table_name}";
        $count_member->execute($sql);*/

        $count_list = [];
        $member_list = $this->member_db->select();
        foreach ($member_list as &$member){
            if($member['cert_no']){
                $member['age'] = get_age_by_cert_no($member['cert_no']);
                $member['sex'] = get_sex_by_cert_no($member['cert_no']);
                $regiter_time = date('Y-m-d', $member['register_time']);
                if($member['age']<=18){
                    $count_list[$regiter_time]['teenagers'][] = $member;
                }elseif($member['age']>18 && $member['age']<=40){
                    $count_list[$regiter_time]['adult'][] = $member;
                }elseif($member['age']>40 && $member['age']<=55){
                    $count_list[$regiter_time]['midlife'][] = $member;
                }else{
                    $count_list[$regiter_time]['old_people'][] = $member;
                }

                $count_list[$regiter_time][$member['sex']][] = $member;
            }
        }


        //登录会员
        $field = "FROM_UNIXTIME(login_time,'%Y-%m-%d') days,count(id) members";
        $login_member_searchs = $this->member_db->field($field)->group('days')->select();

        //注册会员
        $field = "FROM_UNIXTIME(register_time,'%Y-%m-%d') days,count(id) members";
        $register_member_searchs = $this->member_db->field($field)->group('days')->select();

        //认证会员
        $field = "FROM_UNIXTIME(UNIX_TIMESTAMP(create_time),'%Y-%m-%d') days,COUNT(DISTINCT member_id) members";
        $certification_member_searchs = $this->load->table('member2/certification_alipay')->field($field)->group('days')->select();

        $member_days = array_column($register_member_searchs, 'days');

        $crrent_date = date('Y-m-d');
        $days = $this->diffBetweenTwoDays($member_days[0], $crrent_date);
        $data_list = [];
        //会员计数器
        $member_incr = 0;
        for ($i = 0; $i <= $days; $i++) {
            $data = [];
            $today = date('Y-m-d',strtotime("{$member_days[0]} +{$i} day"));
            $data['id'] = $i+1;
            $data['dateline'] = $today;
            $data['register_num'] = $this->getNumByDate($register_member_searchs, $today, 'members');
            $member_incr += $data['register_num'];
            $data['login_num'] = $this->getNumByDate($login_member_searchs, $today, 'members');
            $data['total_num'] = $member_incr;
            $data['certified_num'] = $this->getNumByDate($certification_member_searchs, $today, 'members');
            $data['man_num'] = count($count_list[$today]['男']);
            $data['woman_num'] = count($count_list[$today]['女']);
            $data['teenagers'] = count($count_list[$today]['teenagers']);
            $data['adult'] = count($count_list[$today]['adult']);
            $data['midlife'] = count($count_list[$today]['midlife']);
            $data['old_people'] = count($count_list[$today]['old_people']);
            $data_list[] = $data;
        }

        $result = $count_member->addAll($data_list);
        if($result === false){
            zuji\debug\Debug::error(\zuji\debug\Location::L_DataCount, '初始化每日会员统计数据失败', [
                'error' => $count_member->getError(),
                'data' => $data_list
            ]);
        }

        $max_member_id = $this->member_db->max('id');

        $this->redis = \zuji\cache\Redis::getInstans();
        $max_id_list = $this->redis->get($this->max_cache_ids);
        if($max_id_list){
            $max_id_list = json_decode($max_id_list, true);
        }
        $max_id_list['member_id'] = $max_member_id;
        $this->redis->set($this->max_cache_ids, json_encode($max_id_list));

    }


    /**初始化
     * 向count表插入当天的初始数据，定时每天0点执行
     */
    public function every_day_data_init(){
        $today_date = date('Y-m-d');
        $data = [
            'dateline' => $today_date
        ];
        //生成今日总数据日期记录
        $count_info = $this->count_total_db->where(['dateline' => $today_date])->find();
        if(empty($count_info)){
            $total_data = $this->count_total_db->create($data);
            $result = $this->count_total_db->add($total_data);
            if($result === false){
                zuji\debug\Debug::error(\zuji\debug\Location::L_DataCount, '插入每日统计数据失败', [
                    'error' => $this->count_total_db->getError(),
                    'data' => $data
                ]);
            }
        }
        //生成会员日期数据
        $count_member = $this->load->service('statistics/count_member');
        $count_member_info = $count_member->where(['dateline' => $today_date])->find();
        if(empty($count_member_info)){
            $member_total = $this->member_db->count();
            $data['total_num'] = $member_total;
            $member_data = $count_member->create($data);
            $result = $count_member->add($member_data);
            if($result === false){
                zuji\debug\Debug::error(\zuji\debug\Location::L_DataCount, '插入每日统计数据失败', [
                    'error' => $this->count_total_db->getError(),
                    'data' => $data
                ]);
            }
        }

        $max_id_arr['order_id'] = $this->order_db->max('order_id');
        $max_id_arr['member_id'] = $this->member_db->max('id');

        $this->redis = \zuji\cache\Redis::getInstans();
        $this->redis->set($this->max_cache_ids, json_encode($max_id_arr));
    }

    /**
     * 订单相关条件数据增量
     *
     */
    public function condition_data_incr(){

        $order_count_max_id = $this->count_condition_db->max('id');
        $order2_service = $this->load->table('order2/order2');
        $order_max_id = $order2_service->max('order_id');
        //订单表里的最大订单数大于条件表里的订单数就执行数据统计
        if($order_max_id > $order_count_max_id){
            //获取新增订单id
            $order_id_arr = $order2_service->where(['order_id'=>['gt', $order_count_max_id]])->getField('order_id', true);
            //插入订单相关条件
            $result = $this->init_count_condition(['order_id'=>$order_id_arr]);
            if($result){

                $this->count_channel_machine_data_incr();
            }
        }
    }


    /**
     * 数据增量
     * 统计会员相关数据、门店订单相关数据、订单总量数据统计
     */
    public function count_data_incr(){
        //获取最大订单id和最大会员id
        $max_order_id = $this->order_db->max('order_id');
        $max_member_id = $this->member_db->max('id');
        //获取缓存最大订单id和最大会员id
        $this->redis = \zuji\cache\Redis::getInstans();
        $max_id_arr = $this->redis->get($this->max_cache_ids);
        if(empty($max_id_arr)){
            $max_id_arr = [
                'order_id' => $max_order_id,
                'member_id' => $max_member_id
            ];
            //缓存最大订单id和最大会员id
            $this->redis->set($this->max_cache_ids, json_encode($max_id_arr));
        }else{
            $data = [];
            $max_id_arr = json_decode($max_id_arr, true);
            //会员数据统计（zuji_count_member）
            $this->count_member_data_incr($max_id_arr);

            if($max_id_arr['order_id'] < $max_order_id){
                //获取订单流表名称
                $order2_follow_table = $this->follow_db->getTableName();
                $begin_time = strtotime(date('Y-m-d 00:00:00'));
                $end_time = time();

                //门店订单数据统计(zuji_count_channel_machine)
                $this->count_channel_data_incr($max_id_arr);

                //订单总数据统计
                //计算下单量
                $order_num = $max_order_id-$max_id_arr['order_id'];
                $data['order_num'] = ['exp','order_num+'.$order_num];
                //计算成交量
                $w = [
                    't2.new_status' => ['IN', [7, 22]],
                    't2.create_time' => ['BETWEEN', [$begin_time ,$end_time]]
                ];
                $payment_searchs = $this->order_db->field('sum(amount) as amount, count(t1.order_id) as orders')->alias('t1')
                    ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
                    ->where($w)
                    ->find();
                $data['complete_order_num'] = $payment_searchs['orders'];
                $data['pay_amount'] = !empty($payment_searchs['amount']) ? $payment_searchs['amount'] : 0;

                //退款量
                $w = [
                    't2.new_status' => ['IN', [10, 23]],
                    't2.create_time' => ['BETWEEN', [$begin_time ,$end_time]]
                ];
                //根据相关条件统计订单退款金额及订单退款数
                $refund_searchs = $this->order_db->field('sum(amount) as amount, count(t1.order_id) as orders')->alias('t1')
                    ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
                    ->where($w)
                    ->find();
                //退款数
                $data['refund_num'] = $refund_searchs['orders'];
                //退款金额
                $data['refund_amount'] = !empty($refund_searchs['amount']) ? $payment_searchs['amount'] : 0;

                //租机发货量
                $w = [
                    't1.business_key' => \zuji\Business::BUSINESS_ZUJI,
                    't2.new_status' => 11,
                    't2.create_time' => ['BETWEEN', [$begin_time ,$end_time]]
                ];
                $delevery_searchs = $this->order_db->alias('t1')
                    ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
                    ->where($w)
                    ->count('DISTINCT t1.order_id');
                $data['delivery_num'] = $delevery_searchs;

                //统计检测订单量
                $where = [
                    'new_status' => ['IN', [16,17]],
                    'create_time' => ['BETWEEN', [$begin_time ,$end_time]]
                ];
                $evaluation_num = $this->follow_db->where($where)->count();
                //检测单量
                $data['evaluation_num'] = $evaluation_num;

                //统计订单回寄量
                $w = [
                    't1.business_key' => \zuji\Business::BUSINESS_HUIJI,
                    't2.new_status' => 11,
                    't2.create_time' => ['BETWEEN', [$begin_time ,$end_time]]
                ];
                $huiji_searchs = $this->order_db->alias('t1')
                    ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
                    ->where($w)
                    ->count('DISTINCT t1.order_id');
                //回寄订单量
                $data['huiji_num'] = $huiji_searchs;

                //统计订单换货量
                $w = [
                    't1.business_key' => \zuji\Business::BUSINESS_HUANHUO,
                    't2.new_status' => 11,
                    't2.create_time' => ['BETWEEN', [$begin_time ,$end_time]]
                ];
                $huanhuo_searchs = $this->order_db->alias('t1')
                    ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
                    ->where($w)
                    ->count('DISTINCT t1.order_id');
                //换货订单量
                $data['huanhuo_num'] = $huanhuo_searchs;

                $today_date = date('Y-m-d');
                //更新统计数据
                $this->count_total_db->where(['dateline' => $today_date])->save($data);


                $this->redis = \zuji\cache\Redis::getInstans();
                $max_id_list = $this->redis->get($this->max_cache_ids);
                if($max_id_list){
                    $max_id_list = json_decode($max_id_list, true);
                }
                $max_id_list['order_id'] = $max_order_id;
                $this->redis->set($this->max_cache_ids, json_encode($max_id_list));

            }

        }
    }

    /**
     * 渠道相关数据统计(zuji_count_channel_machine)
     */
    private function count_channel_machine_data_incr(){

        //条件为今天零点到当前时间开始统计，因为成交量根据订单的增量统计是不准确的
        $date = date('Y-m-d');
        $begin_time = strtotime(date('Y-m-d 00:00:00'));
        $end_time = time();
        $where['t1.create_time'] = ['BETWEEN', [$begin_time ,$end_time]];

        //机型
        $goods_machine_model = $this->load->table('goods/goods_machine_model');
        //获取机型表名称
        $goods_machine_table = $goods_machine_model->getTableName();
        //获取渠道、机型查询今天的订单量
        $order_list = $this->count_condition_db->alias('t1')
            ->field('t1.channel_id,t1.machine_id, t2.name, count(*) as order_num')
            ->join($goods_machine_table.' as t2 ON t1.machine_id=t2.id')
            ->where($where)
            ->group('t1.channel_id, t1.machine_id')
            ->select();

        //统计渠道、机型查询今天的成交量
        $w['t2.create_time'] = ['BETWEEN', [$begin_time ,$end_time]];
        $w['t2.new_status'] = 22;
        //获取订单流表名称
        $order2_follow_table = $this->follow_db->getTableName();
        $complete_order_list = $this->count_condition_db->alias('t1')
            ->field('channel_id, machine_id, count(*) as complete_order_num')
            ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
            ->where($w)
            ->group('channel_id, machine_id')
            ->select();

        $count_channel_machine_model = $this->load->service('statistics/count_channel_machine');

        //以时间，渠道，机型分组更新订单量成交量
        foreach ($order_list as $item){
            $data = [
                'dateline' => $date,
                'channel_id' => $item['channel_id'],
                'machine_id' => $item['machine_id'],
                'machine_name' => $item['name'],
                'order_num' => $item['order_num'],
                'complete_order_num' => 0
            ];

            foreach ($complete_order_list as $value){
                if($value['channel_id'] == $item['channel_id'] && $value['machine_id'] == $item['machine_id']){
                    $data['complete_order_num'] = $value['complete_order_num'];
                }
            }

            $where = ['dateline' => $date, 'channel_id' => $item['channel_id'], 'machine_id' => $item['machine_id']];
            $info = $count_channel_machine_model->where($where)->find();
            if($info){
                $data['id'] = $info['id'];
            }
            //如果有数据就更新，没有数据则新增
            $count_channel_machine_model->update($data);
        }
    }

    /**
     * 渠道数据增量
     * @param array $max_id_arr
     */
    private function count_channel_data_incr(array $max_id_arr){

        $redis = \zuji\cache\Redis::getInstans();
        //获取门店id
        $appid_list = $this->order_db->where(['appid'=>['GT', 0], 'order_id'=>['GT', $max_id_arr['order_id']]])->group('appid')->getField('appid', true);
        //统计每个门店的下单量成交量等数据
        foreach ($appid_list as $appid){
            $today_date = date('Y-m-d');
            //统计下单量
            $appid_info = $this->count_channel_db->where(['dateline'=>$today_date, 'appid'=>$appid])->find();
            if(empty($appid_info)){
                $appid_data = $this->count_channel_db->create(['dateline'=>$today_date, 'appid'=>$appid]);
                $this->count_channel_db->add($appid_data);
            }

            $where = ['appid' => $appid, 'order_id'=>['GT', $max_id_arr['order_id']]];

            $order_num = $this->order_db->where($where)->count();
            $data['order_num'] = ['exp','order_num+'.$order_num];

            //统计支付成功的成交量
            $order2_follow_table = $this->follow_db->getTableName();
            $begin_time = strtotime(date('Y-m-d 00:00:00'));
            $end_time = time();
            $w = [
                't1.appid' => $appid,
                't2.new_status' => ['IN', [7, 22]],
                't2.create_time' => ['BETWEEN', [$begin_time ,$end_time]]
            ];
            $payment_searchs = $this->order_db->field('sum(amount) as amount, count(t1.order_id) as orders')->alias('t1')
                ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
                ->where($w)
                ->find();
            $data['complete_order_num'] = $payment_searchs['orders'];
            $data['all_amount'] = !empty($payment_searchs['amount']) ? $payment_searchs['amount'] : 0;
            //获取门店商品用户访问量
            $key = 'store:'.$appid.':'.$today_date;
            $pv = $redis->get($key);
            $data['pv'] = $pv ? $pv : 0;
            //即将到期手机量
            $data['service_expire_num'] = 0;

            $this->count_channel_db->where(['dateline' => $today_date, 'appid' => $appid])->save($data);
        }
    }

    /**
     * 会员数据增量
     * @param array $max_id_arr
     */
    private function count_member_data_incr(array $max_id_arr){
        $count_member = $this->load->service('statistics/count_member');
        $max_member_id = $this->member_db->max('id');
        //比较新增会员id
        if($max_id_arr['member_id'] < $max_member_id){
            //获取新增会员信息
            $count_list = [];
            $member_list = $this->member_db->where(['id' => ['GT', $max_id_arr['member_id']]])->select();
            foreach ($member_list as &$member){
                if($member['cert_no']){
                    $member['age'] = get_age_by_cert_no($member['cert_no']);
                    $member['sex'] = get_sex_by_cert_no($member['cert_no']);
                    if($member['age']<=18){
                        $count_list['teenagers'][] = $member;
                    }elseif($member['age']>18 && $member['age']<=40){
                        $count_list['adult'][] = $member;
                    }elseif($member['age']>40 && $member['age']<=55){
                        $count_list['midlife'][] = $member;
                    }else{
                        $count_list['old_people'][] = $member;
                    }

                    $count_list[$member['sex']][] = $member;
                }
            }

            $where['id'] = ['GT', $max_id_arr['member_id']];
            //注册会员
            $register_member_num = $this->member_db->where($where)->count();
            //把新增用户数据统计并更新入库
            $data['register_num'] = ['exp','register_num+'.$register_member_num];

            $data['total_num'] = ['exp','total_num+'.$register_member_num];

            $data['man_num'] = ['exp','man_num+'.count($count_list['男'])];
            $data['woman_num'] = ['exp','woman_num+'.count($count_list['女'])];
            $data['teenagers'] = ['exp','teenagers+'.count($count_list['teenagers'])];
            $data['adult'] = ['exp','adult+'.count($count_list['adult'])];
            $data['midlife'] = ['exp','midlife+'.count($count_list['midlife'])];
            $data['old_people'] = ['exp','old_people+'.count($count_list['old_people'])];

            $today_date = date('Y-m-d');
            $count_member->where(['dateline' => $today_date])->save($data);
            //更新到缓存里
            $max_member_id = $this->member_db->max('id');

            $this->redis = \zuji\cache\Redis::getInstans();
            $max_id_list = $this->redis->get($this->max_cache_ids);
            if($max_id_list){
                $max_id_list = json_decode($max_id_list, true);
            }
            $max_id_list['member_id'] = $max_member_id;
            $this->redis->set($this->max_cache_ids, json_encode($max_id_list));
        }else{
            //统计今日登录会员数
            $login_where['login_time'] = ['BETWEEN', [strtotime("-10 minute") ,time()]];
            $login_num = $this->member_db->where($login_where)->count();
            $data['login_num'] = ['exp','login_num+'.$login_num];

            //统计今日认证会员数
            $certification_member_num = $this->load->table('member2/certification_alipay')->where(['create_time' => ['BETWEEN', [strtotime("-10 minute") ,time()]]])->distinct('member_id')->count();
            $data['certified_num'] = ['exp','certified_num+'.$certification_member_num];

            $today_date = date('Y-m-d');
            $count_member->where(['dateline' => $today_date])->save($data);
        }

    }

    /**
     * 求两个日期之间相差的天数
     * (针对1970年1月1日之后，求之前可以采用泰勒公式)
     * @param string $day1
     * @param string $day2
     * @return number
     */
    private function diffBetweenTwoDays ($day1, $day2)
    {
        $second1 = strtotime($day1);
        $second2 = strtotime($day2);
        if ($second1 < $second2) {
        $tmp = $second2;
        $second2 = $second1;
        $second1 = $tmp;
        }
        return ($second1 - $second2) / 86400;
    }

    /**
     * 返回指定日期的数据
     * @param array $search_list
     * @param $date
     * @param $key
     * @return int
     */
    private function getNumByDate(array $search_list, $date, $key){
        foreach ($search_list as $item){
            if($item['days'] == $date){
                return $item[$key];
            }
        }
        return 0;
    }

    /**
     * 统计昨天的数据(补救)
     */
    public function count_yesterday_data(){

        $redis = \zuji\cache\Redis::getInstans();
        //获取昨天日期
        $date = date('Y-m-d', strtotime("-1 day"));
        $begin_time = strtotime("-1 day",strtotime(date('Y-m-d 00:00:00')));
        $end_time = strtotime("-1 day",strtotime(date('Y-m-d 23:59:59')));
        $where['create_time'] = ['BETWEEN', [$begin_time ,$end_time]];

        //总下单量
        $all_order_num = $this->order_db->where($where)->count();

        //总成交量
        $order2_follow_table = $this->follow_db->getTableName();
        $w['t2.create_time'] = ['BETWEEN', [$begin_time ,$end_time]];
        $w['t2.new_status'] = 22;
        $all_complete_order_num = $this->order_db->alias('t1')
            ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
            ->where($w)
            ->count();

        $this->count_total_db->where(['dateline' => $date])->save(['order_num' => $all_order_num, 'complete_order_num' => $all_complete_order_num]);

        //统计渠道相关机型下单量
        $order_list = $this->count_condition_db->field('channel_id, machine_id, count(*) as order_num')
            ->where($where)
            ->group('channel_id, machine_id')
            ->select();

        $complete_order_list = $this->count_condition_db->alias('t1')
            ->field('channel_id, machine_id, count(*) as complete_order_num')
            ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
            ->where($w)
            ->group('channel_id, machine_id')
            ->select();
        $count_channel_machine_model = $this->load->service('statistics/count_channel_machine');
        foreach ($order_list as $item){
            $m_w = [
                'dateline' => $date,
                'channel_id' => $item['channel_id'],
                'machine_id' => $item['machine_id']
            ];
            $count_channel_machine_model->where($m_w)->save(['order_num' => $item['order_num']]);
        }
        foreach ($complete_order_list as $item){
            $m_w = [
                'dateline' => $date,
                'channel_id' => $item['channel_id'],
                'machine_id' => $item['machine_id']
            ];
            $count_channel_machine_model->where($m_w)->save(['complete_order_num' => $item['complete_order_num']]);
        }

        //统计门店下单量
        $appid_list = $this->order_db->where($where)->group('appid')->getField('appid', true);
        foreach ($appid_list as $appid){
            $data = [];
            $where['appid'] = $appid;

            //下单量
            $data['order_num'] = $this->order_db->where($where)->count();

            //成交量
            $w['t1.appid'] = $appid;
            $data['complete_order_num'] = $this->order_db->alias('t1')
                ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
                ->where($w)
                ->count();

            //complete_amount
            $data['complete_amount'] = $this->order_db->alias('t1')
                ->join($order2_follow_table.' as t2 ON t1.order_id=t2.order_id')
                ->where($w)
                ->sum('amount');

            $key = 'store:'.$appid.':'.date('Ymd', strtotime($date));
            $pv = $redis->get($key);
            $data['pv'] = !empty($pv) ? $pv : 0;

            $this->count_channel_db->where(['dateline' => $date, 'appid' => $appid])->save($data);
        }

    }


}